Classe Funcionário:
package CalculoImpostoRenda;

public class Funcionario {

    private String nome;
    private double salario;

    public Funcionario(String nome, double salario) {
       this.nome = nome;
       this.salario = salario;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public double getSalario() {
        return salario;
    }

    public void setSalario(double salario) {
        if (salario <= 0 ) {
            throw new IllegalArgumentException("Salário deve ser maior que Zero");
        }
        this.salario = salario;
    }

    /**
    * Método que calcular o imposto de renda do funcionário
    * com base no salário e na lista de classificação de 
    * imposto de renda abaixo:
    *    Faixa Faixa de Salário Alíquota
    * 
    *    1ª Faixa Até R$ 1.903,98 Isento \n
    *    2ª Faixa De R$ 1.903,99 à R$ 2.826,65 7,5% \n
    *    3ª Faixa De R$ 2.826,66 à R$ 3.751,05 15,0% \n
    *    4ª Faixa De R$ 3.751,06 à R$ 4.664,68 22,5% \n
    *    5ª Faixa A partir de R$ 4.664,69 27,5% \n
    * 
    * @return Valor do imposto de renda a pagar pelo funcionário 
    */

    public double calcularIrpf() {
        double imposto = 0;
        double diferenca = 0;
        
        FaixaIrpf faixaIdentificada = identificarFaixaIrpf();
        
        if (!FaixaIrpf.PRIMEIRA.equals(faixaIdentificada)) {
           // Faixa 2
           if (FaixaIrpf.SEGUNDA.equals(faixaIdentificada)) {
               diferenca = salario - 1903.98;
               imposto = diferenca * (7.5/100);
           } else if (FaixaIrpf.TERCEIRA.equals(faixaIdentificada)) { // Faixa 3
               // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = salario - 2826.65;
               imposto += diferenca * (15.0/100);
           } else if (FaixaIrpf.QUARTA.equals(faixaIdentificada)) {
                // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = 3751.05 - 2826.65;
               imposto += diferenca * (15.0/100);
               
               // Calcular da faixa 4
               diferenca = salario - 3751.05;
               imposto += diferenca * (22.5/100);
           } else {
                // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = 3751.05 - 2826.65;
               imposto += diferenca * (15.0/100);
               
               // Calcular da faixa 4
               diferenca = 4664.68 - 3751.05;
               imposto += diferenca * (22.5/100);
               
               diferenca = salario - 4664.68;
               imposto += diferenca * (27.5/100);
           }
        }
        return imposto;
    }
    
    public FaixaIrpf identificarFaixaIrpf() {
        if (salario <= 1903.98) {
            return FaixaIrpf.PRIMEIRA;
        } else if (salario <= 2826.65) {
            return FaixaIrpf.SEGUNDA;
        } else if (salario <= 3751.05) {
            return FaixaIrpf.TERCEIRA;
        } else if (salario <= 4664.68) {
            return FaixaIrpf.QUARTA;
        } else {
            return FaixaIrpf.QUINTA;
        }
    }
    
}

Identificar Faixa:

package CalculoImpostoRenda
public enum FaixaIrpf {

    PRIMEIRA,
    SEGUNDA,
    TERCEIRA,
    QUARTA, 
    QUINTA
    
}

Teste Unitário:

package CalculoImpostoRenda;

import org.junit.Test;
import static org.junit.Assert.*;

public class FuncionarioTest {
   
     /**
     * Caso de teste 1
     */
    @Test
    public void test01_SalarioCategorizadoComoPrimeiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 850);
        assertEquals(FaixaIrpf.PRIMEIRA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso de teste 2
     */
    @Test
    public void test02_ImpostoCalculadoComoPrimeiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 850);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 3
     */
    @Test
    public void test03_SalarioCategorizadoComoPrimeiraFaixaSuperior() {
        Funcionario func1 = new Funcionario("Henrique", 1903.98);
        assertEquals(FaixaIrpf.PRIMEIRA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso Teste 4
     */
    @Test
    public void test04_ImpostoCalculadoComoPrimeiraFaixaSuperior() {
        Funcionario func1 = new Funcionario("Henrique", 1903.98);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 5
     */
    @Test
    public void test05_SalarioCategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 1903.99);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso de teste 6
     */
    @Test
    public void test06_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 1903.99);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 7
     */
    @Test
    public void test07_CategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2000.00);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 8
     */
    @Test
    public void test08_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2000.00);
        assertEquals(7.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 9
     */
    @Test
    public void test09_CategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.65);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 10
     */
    @Test
    public void test10_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.65);
        assertEquals(69.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 11
     */
    @Test
    public void test12_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.66);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 12
     */
    @Test
    public void test12_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.66);
        assertEquals(69.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 13
     */
    @Test
    public void test13_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3000.00);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 14
     */
    @Test
    public void test14_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3000.00);
        assertEquals(95.20, func1.calcularIrpf(), 0.01);
    }
    
    
    /**
     * Caso de teste 15
     */
    @Test
    public void test15_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.05);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 16
     */
    @Test
    public void test16_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.05);
        assertEquals(207.86, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 17
     */
    @Test
    public void test17_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.06);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 18
     */
    @Test
    public void test18_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.06);
        assertEquals(207.86, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 19
     */
    @Test
    public void test19_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4000.00);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 20
     */
    @Test
    public void test20_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4000.00);
        assertEquals(263.87, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 21
     */
    @Test
    public void test21_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.68);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 22
     */
    @Test
    public void test22_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.68);
        assertEquals(413.42, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 23
     */
    @Test
    public void test23_CategorizadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.69);
        assertEquals(FaixaIrpf.QUINTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 24
     */
    @Test
    public void test24_ImpostoCalculadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.69);
        assertEquals(413.42, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 25
     */
    @Test
    public void test25_CategorizadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 5000.00);
        assertEquals(FaixaIrpf.QUINTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 26
     */
    @Test
    public void test26_ImpostoCalculadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 5000.00);
        assertEquals(505.64, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso teste 27
     */
    @Test(expected = IllegalArgumentException.class)
    public void test27_RecusarSalarioNegativo() {
        Funcionario func1 = new Funcionario("André", -100);
    }
}

Interface:

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package impostorendaprova;

/**
 *
 * @author henrique
 */
public class Interface extends javax.swing.JFrame {

    /** Creates new form Interface */
    public Interface() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfSalario = new javax.swing.JTextField();
        btAvaliar = new javax.swing.JButton();
        tfFaixa = new javax.swing.JTextField();
        tfImposto = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Salário:");

        btAvaliar.setText("Avaliar");
        btAvaliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAvaliarActionPerformed(evt);
            }
        });

        tfFaixa.setEnabled(false);

        tfImposto.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btAvaliar)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tfImposto, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                    .addComponent(tfFaixa))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(btAvaliar)
                .addGap(18, 18, 18)
                .addComponent(tfFaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfImposto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btAvaliarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        ImpostoRendaProva funci = new ImpostoRendaProva(null, 0);
        
        funci.setSalario((Double.valueOf(tfSalario.getText())));
        double imposto = funci.calcularIrpf();
        
        double salario = Double.parseDouble(tfSalario.getText());
        
        if(salario >= 1903.99){
        tfImposto.setText(String.format("O imposto a pagar é de R$%.2f\n", imposto));
        }else{
        tfImposto.setText(String.format("Funcionário Isento"));
        }
        FaixaIrpf faixa = funci.identificarFaixaIrpf();
        
        if(faixa.equals(FaixaIrpf.PRIMEIRA)){
            tfFaixa.setText(String.format("O salário está na primeira faixa"));
        }else if(faixa.equals(FaixaIrpf.SEGUNDA)){
            tfFaixa.setText(String.format("O salário está na segunda faixa"));
        }else if(faixa.equals(FaixaIrpf.TERCEIRA)){
        tfFaixa.setText(String.format("O salário está na terceira faixa"));
        }else if(faixa.equals(FaixaIrpf.QUARTA)){
            tfFaixa.setText(String.format("O salário está na quarta faixa"));
        }else if(faixa.equals(FaixaIrpf.QUINTA)){
            tfFaixa.setText(String.format("O salário está na quinta faixa"));
        }
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btAvaliar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField tfFaixa;
    private javax.swing.JTextField tfImposto;
    private javax.swing.JTextField tfSalario;
    // End of variables declaration                   

}
