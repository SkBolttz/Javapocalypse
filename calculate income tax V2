Classe Funcionário:
package CalculoImpostoRenda;

public class Funcionario {

    private String nome;
    private double salario;

    public Funcionario(String nome, double salario) {
       this.nome = nome;
       this.salario = salario;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public double getSalario() {
        return salario;
    }

    public void setSalario(double salario) {
        if (salario <= 0 ) {
            throw new IllegalArgumentException("Salário deve ser maior que Zero");
        }
        this.salario = salario;
    }

    /**
    * Método que calcular o imposto de renda do funcionário
    * com base no salário e na lista de classificação de 
    * imposto de renda abaixo:
    *    Faixa Faixa de Salário Alíquota
    * 
    *    1ª Faixa Até R$ 1.903,98 Isento \n
    *    2ª Faixa De R$ 1.903,99 à R$ 2.826,65 7,5% \n
    *    3ª Faixa De R$ 2.826,66 à R$ 3.751,05 15,0% \n
    *    4ª Faixa De R$ 3.751,06 à R$ 4.664,68 22,5% \n
    *    5ª Faixa A partir de R$ 4.664,69 27,5% \n
    * 
    * @return Valor do imposto de renda a pagar pelo funcionário 
    */

    public double calcularIrpf() {
        double imposto = 0;
        double diferenca = 0;
        
        FaixaIrpf faixaIdentificada = identificarFaixaIrpf();
        
        if (!FaixaIrpf.PRIMEIRA.equals(faixaIdentificada)) {
           // Faixa 2
           if (FaixaIrpf.SEGUNDA.equals(faixaIdentificada)) {
               diferenca = salario - 1903.98;
               imposto = diferenca * (7.5/100);
           } else if (FaixaIrpf.TERCEIRA.equals(faixaIdentificada)) { // Faixa 3
               // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = salario - 2826.65;
               imposto += diferenca * (15.0/100);
           } else if (FaixaIrpf.QUARTA.equals(faixaIdentificada)) {
                // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = 3751.05 - 2826.65;
               imposto += diferenca * (15.0/100);
               
               // Calcular da faixa 4
               diferenca = salario - 3751.05;
               imposto += diferenca * (22.5/100);
           } else {
                // Calcular da faixa 2
               diferenca = 2826.65 - 1903.98;
               imposto = diferenca * (7.5/100);
               
               // Calcular da faixa 3
               diferenca = 3751.05 - 2826.65;
               imposto += diferenca * (15.0/100);
               
               // Calcular da faixa 4
               diferenca = 4664.68 - 3751.05;
               imposto += diferenca * (22.5/100);
               
               diferenca = salario - 4664.68;
               imposto += diferenca * (27.5/100);
           }
        }
        return imposto;
    }
    
    public FaixaIrpf identificarFaixaIrpf() {
        if (salario <= 1903.98) {
            return FaixaIrpf.PRIMEIRA;
        } else if (salario <= 2826.65) {
            return FaixaIrpf.SEGUNDA;
        } else if (salario <= 3751.05) {
            return FaixaIrpf.TERCEIRA;
        } else if (salario <= 4664.68) {
            return FaixaIrpf.QUARTA;
        } else {
            return FaixaIrpf.QUINTA;
        }
    }
    
}

Identificar Faixa:

package CalculoImpostoRenda
public enum FaixaIrpf {

    PRIMEIRA,
    SEGUNDA,
    TERCEIRA,
    QUARTA, 
    QUINTA
    
}

Teste Unitário:

package CalculoImpostoRenda;

import org.junit.Test;
import static org.junit.Assert.*;

public class FuncionarioTest {
   
     /**
     * Caso de teste 1
     */
    @Test
    public void test01_SalarioCategorizadoComoPrimeiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 850);
        assertEquals(FaixaIrpf.PRIMEIRA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso de teste 2
     */
    @Test
    public void test02_ImpostoCalculadoComoPrimeiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 850);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 3
     */
    @Test
    public void test03_SalarioCategorizadoComoPrimeiraFaixaSuperior() {
        Funcionario func1 = new Funcionario("Henrique", 1903.98);
        assertEquals(FaixaIrpf.PRIMEIRA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso Teste 4
     */
    @Test
    public void test04_ImpostoCalculadoComoPrimeiraFaixaSuperior() {
        Funcionario func1 = new Funcionario("Henrique", 1903.98);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 5
     */
    @Test
    public void test05_SalarioCategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 1903.99);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }

    /**
     * Caso de teste 6
     */
    @Test
    public void test06_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 1903.99);
        assertEquals(0.00, func1.calcularIrpf(), 0.01);
    }

    /**
     * Caso de teste 7
     */
    @Test
    public void test07_CategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2000.00);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 8
     */
    @Test
    public void test08_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2000.00);
        assertEquals(7.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 9
     */
    @Test
    public void test09_CategorizadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.65);
        assertEquals(FaixaIrpf.SEGUNDA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 10
     */
    @Test
    public void test10_ImpostoCalculadoComoSegundaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.65);
        assertEquals(69.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 11
     */
    @Test
    public void test12_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.66);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 12
     */
    @Test
    public void test12_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 2826.66);
        assertEquals(69.20, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 13
     */
    @Test
    public void test13_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3000.00);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 14
     */
    @Test
    public void test14_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3000.00);
        assertEquals(95.20, func1.calcularIrpf(), 0.01);
    }
    
    
    /**
     * Caso de teste 15
     */
    @Test
    public void test15_CategorizadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.05);
        assertEquals(FaixaIrpf.TERCEIRA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 16
     */
    @Test
    public void test16_ImpostoCalculadoComoTerceiraFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.05);
        assertEquals(207.86, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 17
     */
    @Test
    public void test17_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.06);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 18
     */
    @Test
    public void test18_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 3751.06);
        assertEquals(207.86, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 19
     */
    @Test
    public void test19_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4000.00);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 20
     */
    @Test
    public void test20_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4000.00);
        assertEquals(263.87, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 21
     */
    @Test
    public void test21_CategorizadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.68);
        assertEquals(FaixaIrpf.QUARTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 22
     */
    @Test
    public void test22_ImpostoCalculadoComoQuartaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.68);
        assertEquals(413.42, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 23
     */
    @Test
    public void test23_CategorizadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.69);
        assertEquals(FaixaIrpf.QUINTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 24
     */
    @Test
    public void test24_ImpostoCalculadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 4664.69);
        assertEquals(413.42, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso de teste 25
     */
    @Test
    public void test25_CategorizadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 5000.00);
        assertEquals(FaixaIrpf.QUINTA, func1.identificarFaixaIrpf());
    }
    
    /**
     * Caso de teste 26
     */
    @Test
    public void test26_ImpostoCalculadoComoQuintaFaixa() {
        Funcionario func1 = new Funcionario("Henrique", 5000.00);
        assertEquals(505.64, func1.calcularIrpf(), 0.01);
    }
    
    /**
     * Caso teste 27
     */
    @Test(expected = IllegalArgumentException.class)
    public void test27_RecusarSalarioNegativo() {
        Funcionario func1 = new Funcionario("André", -100);
    }
}

Interface:

