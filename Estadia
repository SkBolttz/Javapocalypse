Classe Estadia

package prova1;
/**
 *
 * @author henrique
 */
public class Estadia {

    private Periodo periodo;
    private int quantidadeDias;

    /**
     * Utilizada classe construtor com valor parametrizados /n
     * @param periodo
     * @param quantidadeDias 
     */
    public Estadia(Periodo periodo, int quantidadeDias) {
        this.periodo = periodo;
        this.quantidadeDias = quantidadeDias;
    }

    /**
     *
     * @return
     */
    public Periodo getPeriodo() {
        return periodo;
    }

    /**
     * Realiza a verficação, caso o período esteja vazio, retorna uma exceção /n
     * @param periodo 
     */
    public void setPeriodo(Periodo periodo) {
        if (periodo == null) {
            throw new IllegalArgumentException("Período não pode ser vazio!");
        } else {
            this.periodo = periodo;
        }
    }

    /**
     *
     * @return
     */
    public int getQuantidadeDias() {
        return quantidadeDias;
    }

    /**
     * Realiza a verificação, caso seja menor que um, aplica uma exceção /n
     * Caso seja alta temporada e o cliente fique menos que cinco dias, aplica uma exceção /n
     * @param quantidadeDias 
     */
    public void setQuantidadeDias(int quantidadeDias) {
        if (quantidadeDias < 1) {
            throw new IllegalArgumentException("Valor não pode ser menor que um!");
        } else if (periodo == Periodo.ALTA_TEMPORADA && quantidadeDias < 5) {
            throw new IllegalArgumentException("Em alta temporada, a quantidade de dias não pode ser menor que 5!");
        } else {
            this.quantidadeDias = quantidadeDias;
        }
    }

    /**
     * Nesta clase é verificado o valor a ser pago pelo cliente /n
     * contabilizando a quantidade de dias e o período que o mesmo ficou no local /n
     * @return 
     */
    public float precoPagar() {
        float valorBase = 150;
        float valorTotal;

        switch (periodo) {
            case BAIXA_TEMPORADA:
                valorTotal = quantidadeDias * valorBase;
                if (quantidadeDias == 1) {
                    valorTotal += valorTotal * 0.05f;
                    valorTotal -= valorTotal * 0.30f;
                } else {
                    valorTotal -= valorTotal * 0.30f;
                }
                break;

            case ALTA_TEMPORADA:
                valorTotal = quantidadeDias * valorBase;
                if (quantidadeDias == 1) {
                    valorTotal += valorTotal * 0.25f;
                } else if (quantidadeDias >= 7) {
                    valorTotal += valorTotal * 0.20f;
                    valorTotal -= valorTotal * 0.02f;
                } else {
                    valorTotal += valorTotal * 0.20f;
                }
                break;

            case MEDIA_TEMPORADA:
                valorTotal = quantidadeDias * valorBase;
                if (quantidadeDias == 1) {
                    valorTotal += valorTotal * 0.05f;
                }else{
                    valorTotal = quantidadeDias * valorBase;
                }
                break;

            default:
                throw new IllegalArgumentException("Período desconhecido!");
        }

        return valorTotal;
    }
}

-------------------------------------------------------------------------------------------

Classe Período

package prova1;

/**
 * Inicializa as temporadas
 * @author henrique
 */
public enum Periodo {
   ALTA_TEMPORADA, MEDIA_TEMPORADA, BAIXA_TEMPORADA 
}

-------------------------------------------------------------------------------------------

InterfaceUI

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package prova1;

/**
 *
 * @author henrique
 */
public class InterfaceUi extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceUi
     */
    public InterfaceUi() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfPeriodo = new javax.swing.JTextField();
        tfDias = new javax.swing.JTextField();
        btConsultar = new javax.swing.JButton();
        tfPagar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Informe o período:");

        jLabel2.setText("Informe a quantidade de dias:");

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(77, 77, 77)
                        .addComponent(tfPeriodo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(tfDias, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfPagar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfDias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(btConsultar)
                .addGap(18, 18, 18)
                .addComponent(tfPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {                                            
     /**
     *
     * Ao clique no botão, é setado os valores de temporada e quantidade de dias /n
     * Puxa o método para identificar o Preço a ser pago e retorna no text.
     */
        
        Estadia cliente = new Estadia(null, 0);
       
       String temporada = tfPeriodo.getText();
       int quantidadeD = Integer.parseInt(tfDias.getText());
       
       if(temporada.equalsIgnoreCase("Alta Temporada")){
           cliente.setPeriodo(Periodo.ALTA_TEMPORADA);
           cliente.setQuantidadeDias(quantidadeD);
           
           float precoP = cliente.precoPagar();
           
           tfPagar.setText(String.format("R$%.2f\n", precoP));
       }else if(temporada.equalsIgnoreCase("Média Temporada")){
           cliente.setPeriodo(Periodo.MEDIA_TEMPORADA);
           cliente.setQuantidadeDias(quantidadeD);
           
           float precoP = cliente.precoPagar();
           
           tfPagar.setText(String.format("R$%.2f\n", precoP));
       }else if(temporada.equalsIgnoreCase("Baixa Temporada")){
           cliente.setPeriodo(Periodo.BAIXA_TEMPORADA);
           cliente.setQuantidadeDias(quantidadeD);
           
           float precoP = cliente.precoPagar();
           
           tfPagar.setText(String.format("R$%.2f\n", precoP));
       }
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceUi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btConsultar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField tfDias;
    private javax.swing.JTextField tfPagar;
    private javax.swing.JTextField tfPeriodo;
    // End of variables declaration                   
}

-------------------------------------------------------------------------------------------

package prova1;


import org.junit.Test;
import static org.junit.Assert.*;


public class EstadiaTest {
    
       
     /**
     * Caso de teste 1
     */
    @Test
    public void test01_IdentificarDiaria() {
        Estadia cliente = new Estadia(Periodo.ALTA_TEMPORADA, 8);
        assertEquals(1411.20, cliente.precoPagar(), 0.01);
    }
     /**
     * Caso de teste 2
     */
    @Test
    public void test02_IdentificarDiaria() {
        Estadia cliente = new Estadia(Periodo.MEDIA_TEMPORADA, 1);
        assertEquals(157.50, cliente.precoPagar(), 0.00);
    }
     /**
     * Caso de teste 3
     */
    @Test
    public void test03_IdentificarDiaria() {
        Estadia cliente = new Estadia(Periodo.BAIXA_TEMPORADA, 5);
        assertEquals(525.00, cliente.precoPagar(), 0.00);
    }
     /**
     * Caso de teste 4
     */
    @Test
    public void test04_IdentificarDiaria() {
        Estadia cliente = new Estadia(Periodo.BAIXA_TEMPORADA, 1);
        assertEquals(110.25, cliente.precoPagar(), 0.00);
    }
     /**
     * Caso de teste 5
     */
    @Test
    public void test05IdentificarDiaria() {
        Estadia cliente = new Estadia(Periodo.MEDIA_TEMPORADA, 3);
        assertEquals(450.00, cliente.precoPagar(), 0.00);
    }
}
